<project name="name-of-project" default="full-build" basedir=".">

        <!--all properties-->
        <property name="src.dir" value="folder/src"/>
        <property name="tests.dir" value="folder/tests"/>
        <property name="build.dir" value="build"/>
        <property name="classes.dir" value="${build.dir}/classes"/>
        <property name="jar.dir" value="${build.dir}/jar"/>
        <property name="lib.dir" value="lib"/>
        <property name="logs.dir" value="logs"/>
        <property name="docs.dir" value="docs"/>
        <property name="findbugs.dir" value="${lib.dir}/findbugs"/>
        <property name="pmd.dir" value="${lib.dir}/pmd"/>
        <!-- ===================== -->

        <property name="checkstyle.jar.file" value="lib/checkstyle-6.12.1-all.jar"/>
        <property name="javancss.dir" value="lib/javancss-32.53"/>

        <!-- cobertura properties -->
        <property name="cobertura.datafile" value="${build.dir}/cobertura.ser" />
        <property name="cobertura.jar.dir" value="${lib.dir}/cobertura-2.0.3" />
        <property name="cobertura.jar.file" value="${lib.dir}/cobertura-2.0.3/cobertura-2.0.3.jar" />
        <property name="cobertura.dir" value="cobertura"/>
        <property name="cob.instrumented.dir" value="${cobertura.dir}/instrumented" />
        <!-- ===================== -->

        <!--classpath to libraries like junit, cobertura etc.-->
        <path id="classpath.lib">
            <pathelement location="${classes.dir}" />
            <fileset dir="${lib.dir}">
                <include name="**/*.jar"/>
            </fileset>
        </path>
        <!-- ===================== -->

        <!--junit tests including cobertura reports-->
        <path id="cobertura.lib">
            <fileset dir="${cobertura.jar.dir}">
                <include name="cobertura-2.0.3.jar"/>
                <include name="lib/**/*.jar"/>
            </fileset>
        </path>
        <!-- ===================== -->

        <!--run full build consisting of following targets-->
        <target name="full-build"
                depends="prepare, coverage-report, javadoc, checkstyle, jar, findbugs, pmd, javancss"
                description="test build for java applications">
        </target>
        <!-- ===================== -->

        <!--remove files & directories of previous builds-->
        <target name="clean"
                unless="clean.done"
                description="Cleanup build artifacts">
            <echo>=== CLEAN-UP OF BUILD ARTIFACTS FROM PREVIOUS BUILDS ===</echo>
            <delete dir="${build.dir}"/>
            <delete dir="${classes.dir}"/>
            <delete dir="${logs.dir}"/>
            <delete dir="${docs.dir}"/>

            <delete dir="${cobertura.dir}" />
            <delete dir="${cob.instrumented.dir}" />
            <delete dir="${logs.dir}/cobertura" />
            <delete dir="${logs.dir}/cobertura-xml" />
            <delete dir="${logs.dir}/cobertura-summary-xml" />
            <delete dir="${logs.dir}/cobertura-html" />
            <delete file="cobertura.ser"/>

            <property name="clean.done" value="true"/>
        </target>
        <!-- ===================== -->

        <!--create directories for logs, coverage etc.-->
        <target name="prepare"
                unless="prepare.done"
                depends="clean"
                description="Prepare for build">
            <echo>=== PREPARATION OF FOLDER-STRUCTURE ===</echo>
            <mkdir dir="${build.dir}"/>
            <mkdir dir="${classes.dir}"/>
            <mkdir dir="${logs.dir}"/>
            <mkdir dir="${docs.dir}"/>
            <mkdir dir="${jar.dir}"/>

            <mkdir dir="${cobertura.dir}" />
            <mkdir dir="${cob.instrumented.dir}" />
            <mkdir dir="${logs.dir}/cobertura" />

            <property name="prepare.done" value="true"/>
        </target>
        <!-- ===================== -->

        <!--compile sources and tests-->
        <target name="compile"
                depends="prepare">
            <echo>=== COMPILE ===</echo>
            <echo>=== COMPILING ${src.dir} FILES ... ===</echo>
            <javac debug="true" includeantruntime="false" srcdir="${src.dir}" destdir="${classes.dir}">
            </javac>
            <echo>=== COMPILE ===</echo>
            <echo>=== COMPILING ${tests.dir} FILES ... ===</echo>
            <javac includeantruntime="false" srcdir="${tests.dir}" destdir="${classes.dir}">
                <classpath>
                    <pathelement location="${lib.dir}/junit-4.12.jar" />
                    <pathelement location="${lib.dir}/hamcrest-core-1.3.jar" />
                </classpath>
            </javac>
        </target>
        <!-- ===================== -->

        <target name="jar" depends="compile">
            <jar destfile="${jar.dir}/test.jar" basedir="${classes.dir}"/>
        </target>

        <!--setting up cobertura task and instrument-->
        <taskdef classpathref="cobertura.lib"
                 resource="tasks.properties"/>

        <target name="instrument" depends="compile">
            <cobertura-instrument todir="${cob.instrumented.dir}" >
                <fileset dir="${classes.dir}">
                    <include name="**/*.class"/>
                </fileset>
            </cobertura-instrument>
        </target>
        <!-- ===================== -->

        <!--performing cobertura coverage-test after junit test-->
        <target name="coverage-test"
                depends="instrument">

            <junit dir="./" failureproperty="test.failure" printsummary="yes" fork="true">
                <classpath location="${cobertura.jar.file}"/>
                <classpath location="${cob.instrumented.dir}"/>
                <classpath>
                    <path refid="classpath.lib"/>
                </classpath>
                <formatter type="xml" />
                <batchtest fork="yes" todir="${logs.dir}">
                    <fileset dir="${cob.instrumented.dir}">
                        <include name="**/*Test*"/>
                    </fileset>
                </batchtest>

                <!-- cobertura-specific -->
                <sysproperty key="net.sourceforge.cobertura.datafile" file="cobertura.ser" />
                <classpath refid="cobertura.lib" />
            </junit>
        </target>
        <!-- ===================== -->

        <!--make html report of cobertura-->
        <target name="coverage-report"
                depends="coverage-test">
            <echo>=== PERFORMING COVERAGE-REPORT ===</echo>
            <cobertura-report format="html" srcdir="folder" destdir="${logs.dir}/cobertura">
                <fileset dir="${src.dir}">
                    <include name="**/*.java"/>
                </fileset>
                <fileset dir="${tests.dir}">
                    <include name="**/*.java"/>
                </fileset>
            </cobertura-report>
        </target>
        <!-- ===================== -->

        <!--javadoc-->
        <target name="javadoc"
                depends="compile"
                description="generate javadoc">
            <javadoc packagenames="MyUnit"
                     sourcepath="${src.dir}"
                     destdir="${docs.dir}"
                     failonerror="false"
                     use="true"
                     author="true">
                <doctitle><![CDATA[<h1>DiOmega Test</h1>]]></doctitle>
                <bottom><![CDATA[<i>Copyright &#169; 2015 DiOmega. All Rights Reserved.</i>]]></bottom>
                <fileset dir="${src.dir}">
                    <include name="**/*.java"/>
                </fileset>
            </javadoc>
        </target>
        <!-- ===================== -->

        <!--checkstyle-->
        <target name="checkstyle"
                depends="compile">
            <taskdef resource="com/puppycrawl/tools/checkstyle/ant/checkstyle-ant-task.properties"
                     classpath="${lib.dir}/checkstyle-6.12.1-all.jar"/>
            <checkstyle config="${lib.dir}/checkstyle_styles/sun_checks.xml"
                        failOnViolation="false">
                <fileset dir="${src.dir}" includes="**/*.java"/>
                <formatter type="xml" toFile="${logs.dir}/checkstyle_errors.xml"/>
            </checkstyle>
        </target>
        <!-- ===================== -->

        <!--findbugs-->
        <path id="findbugs.classpath">
            <pathelement location="${findbugs.dir}/lib/findbugs-ant.jar"/>
            <pathelement location="${findbugs.dir}/lib/findbugs.jar"/>
        </path>
        <taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask" classpathref="findbugs.classpath" />
        <target name="findbugs"
                depends="jar">
            <findbugs home="${findbugs.dir}"
                      output="xml" outputFile="${logs.dir}/findbugs_report.xml">
                <auxClasspath>
                    <fileset file="${lib.dir}/junit-4.5.jar" />
                </auxClasspath>
                <sourcePath path="${src.dir}"/>
                <fileset dir="${src.dir}">
                    <include name="**/*.java"/>
                </fileset>
                <class location="${jar.dir}"/>
            </findbugs>
        </target>
        <!-- ===================== -->


        <!-- PMD -->
        <path id="pmd.classpath">
            <pathelement location="${build}" />
            <fileset dir="${pmd.dir}/lib/">
                <include name="*.jar" />
            </fileset>
        </path>
        <taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask"
                 classpathref="pmd.classpath" />
        <target name="pmd">

            <pmd>
                <formatter type="xml" toFile="${logs.dir}/pmd_report.xml" />
                <fileset dir="${src.dir}">
                    <include name="**/*.java" />
                </fileset>
                <ruleset>rulesets/java/basic.xml</ruleset>
                <ruleset>rulesets/java/braces.xml</ruleset>
                <ruleset>rulesets/java/comments.xml</ruleset>
                <ruleset>rulesets/java/comments.xml</ruleset>
                <ruleset>rulesets/java/empty.xml</ruleset>
                <ruleset>rulesets/java/controversial.xml</ruleset>
                <ruleset>rulesets/java/coupling.xml</ruleset>
                <ruleset>rulesets/java/design.xml</ruleset>
                <ruleset>rulesets/java/imports.xml</ruleset>
                <ruleset>rulesets/java/logging-java.xml</ruleset>
                <ruleset>rulesets/java/migrating.xml</ruleset>
                <ruleset>rulesets/java/naming.xml</ruleset>
                <ruleset>rulesets/java/optimizations.xml</ruleset>
                <ruleset>rulesets/java/strings.xml</ruleset>
                <ruleset>rulesets/java/sunsecure.xml</ruleset>
                <ruleset>rulesets/java/unusedcode.xml</ruleset>
                <ruleset>rulesets/java/unnecessary.xml</ruleset>
            </pmd>
        </target>
        <!-- ===================== -->

        <!--JavaNCSS-->
        <target name="javancss" depends="compile">
            <taskdef name="javancss"
                     classname="javancss.JavancssAntTask">
                <classpath>
                    <fileset dir="${javancss.dir}/lib" includes="*.jar"/>
                </classpath>
            </taskdef>

            <javancss srcdir="${src.dir}"
                      generateReport="true"
                      outputfile="${logs.dir}/javancss_metrics.xml"
                      format="xml"/>
        </target>
        <!-- ===================== -->

        <!--jdepend-->
     <!--   <target name="jdepend">

            <jdepend format="xml" outputfile="${logs.dir}/jdepend-report.xml">
                <classpath>
                    <pathelement location="${classes.dir}" />
                    <pathelement location="${lib.dir}/jdepend-2.9.1.jar" />
                </classpath>
                <classpath location="${classes.dir}" />
            </jdepend>

            <style basedir="docs" destdir="docs"
                   includes="jdepend-report.xml"
                   style="${lib.dir}/jdepend.xsl" />

        </target>-->
        <!-- ===================== -->

    </project>